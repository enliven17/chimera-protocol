/* TypeScript file generated from Handlers.res by genType. */

/* eslint-disable */
/* tslint:disable */

const HandlersJS = require('./Handlers.res.js');

import type {ChimeraProtocol_AgentDelegationUpdated_eventFilters as Types_ChimeraProtocol_AgentDelegationUpdated_eventFilters} from './Types.gen';

import type {ChimeraProtocol_AgentDelegationUpdated_event as Types_ChimeraProtocol_AgentDelegationUpdated_event} from './Types.gen';

import type {ChimeraProtocol_BetPlaced_eventFilters as Types_ChimeraProtocol_BetPlaced_eventFilters} from './Types.gen';

import type {ChimeraProtocol_BetPlaced_event as Types_ChimeraProtocol_BetPlaced_event} from './Types.gen';

import type {ChimeraProtocol_MarketCreated_eventFilters as Types_ChimeraProtocol_MarketCreated_eventFilters} from './Types.gen';

import type {ChimeraProtocol_MarketCreated_event as Types_ChimeraProtocol_MarketCreated_event} from './Types.gen';

import type {ChimeraProtocol_MarketResolved_eventFilters as Types_ChimeraProtocol_MarketResolved_eventFilters} from './Types.gen';

import type {ChimeraProtocol_MarketResolved_event as Types_ChimeraProtocol_MarketResolved_event} from './Types.gen';

import type {ChimeraProtocol_PythPriceUpdated_eventFilters as Types_ChimeraProtocol_PythPriceUpdated_eventFilters} from './Types.gen';

import type {ChimeraProtocol_PythPriceUpdated_event as Types_ChimeraProtocol_PythPriceUpdated_event} from './Types.gen';

import type {HandlerTypes_eventConfig as Types_HandlerTypes_eventConfig} from './Types.gen';

import type {chain as Types_chain} from './Types.gen';

import type {contractRegistrations as Types_contractRegistrations} from './Types.gen';

import type {fnWithEventConfig as Types_fnWithEventConfig} from './Types.gen';

import type {genericContractRegisterArgs as Internal_genericContractRegisterArgs} from 'envio/src/Internal.gen';

import type {genericContractRegister as Internal_genericContractRegister} from 'envio/src/Internal.gen';

import type {genericHandlerArgs as Internal_genericHandlerArgs} from 'envio/src/Internal.gen';

import type {genericHandlerWithLoader as Internal_genericHandlerWithLoader} from 'envio/src/Internal.gen';

import type {genericHandler as Internal_genericHandler} from 'envio/src/Internal.gen';

import type {genericLoaderArgs as Internal_genericLoaderArgs} from 'envio/src/Internal.gen';

import type {genericLoader as Internal_genericLoader} from 'envio/src/Internal.gen';

import type {handlerContext as Types_handlerContext} from './Types.gen';

import type {loaderContext as Types_loaderContext} from './Types.gen';

import type {onBlockArgs as Envio_onBlockArgs} from 'envio/src/Envio.gen';

import type {onBlockOptions as Envio_onBlockOptions} from 'envio/src/Envio.gen';

export const ChimeraProtocol_MarketCreated_contractRegister: Types_fnWithEventConfig<Internal_genericContractRegister<Internal_genericContractRegisterArgs<Types_ChimeraProtocol_MarketCreated_event,Types_contractRegistrations>>,Types_HandlerTypes_eventConfig<Types_ChimeraProtocol_MarketCreated_eventFilters>> = HandlersJS.ChimeraProtocol.MarketCreated.contractRegister as any;

export const ChimeraProtocol_MarketCreated_handler: Types_fnWithEventConfig<Internal_genericHandler<Internal_genericHandlerArgs<Types_ChimeraProtocol_MarketCreated_event,Types_handlerContext,void>>,Types_HandlerTypes_eventConfig<Types_ChimeraProtocol_MarketCreated_eventFilters>> = HandlersJS.ChimeraProtocol.MarketCreated.handler as any;

export const ChimeraProtocol_MarketCreated_handlerWithLoader: <loaderReturn>(_1:Internal_genericHandlerWithLoader<Internal_genericLoader<Internal_genericLoaderArgs<Types_ChimeraProtocol_MarketCreated_event,Types_loaderContext>,loaderReturn>,Internal_genericHandler<Internal_genericHandlerArgs<Types_ChimeraProtocol_MarketCreated_event,Types_handlerContext,loaderReturn>>,Types_ChimeraProtocol_MarketCreated_eventFilters>) => void = HandlersJS.ChimeraProtocol.MarketCreated.handlerWithLoader as any;

export const ChimeraProtocol_BetPlaced_contractRegister: Types_fnWithEventConfig<Internal_genericContractRegister<Internal_genericContractRegisterArgs<Types_ChimeraProtocol_BetPlaced_event,Types_contractRegistrations>>,Types_HandlerTypes_eventConfig<Types_ChimeraProtocol_BetPlaced_eventFilters>> = HandlersJS.ChimeraProtocol.BetPlaced.contractRegister as any;

export const ChimeraProtocol_BetPlaced_handler: Types_fnWithEventConfig<Internal_genericHandler<Internal_genericHandlerArgs<Types_ChimeraProtocol_BetPlaced_event,Types_handlerContext,void>>,Types_HandlerTypes_eventConfig<Types_ChimeraProtocol_BetPlaced_eventFilters>> = HandlersJS.ChimeraProtocol.BetPlaced.handler as any;

export const ChimeraProtocol_BetPlaced_handlerWithLoader: <loaderReturn>(_1:Internal_genericHandlerWithLoader<Internal_genericLoader<Internal_genericLoaderArgs<Types_ChimeraProtocol_BetPlaced_event,Types_loaderContext>,loaderReturn>,Internal_genericHandler<Internal_genericHandlerArgs<Types_ChimeraProtocol_BetPlaced_event,Types_handlerContext,loaderReturn>>,Types_ChimeraProtocol_BetPlaced_eventFilters>) => void = HandlersJS.ChimeraProtocol.BetPlaced.handlerWithLoader as any;

export const ChimeraProtocol_MarketResolved_contractRegister: Types_fnWithEventConfig<Internal_genericContractRegister<Internal_genericContractRegisterArgs<Types_ChimeraProtocol_MarketResolved_event,Types_contractRegistrations>>,Types_HandlerTypes_eventConfig<Types_ChimeraProtocol_MarketResolved_eventFilters>> = HandlersJS.ChimeraProtocol.MarketResolved.contractRegister as any;

export const ChimeraProtocol_MarketResolved_handler: Types_fnWithEventConfig<Internal_genericHandler<Internal_genericHandlerArgs<Types_ChimeraProtocol_MarketResolved_event,Types_handlerContext,void>>,Types_HandlerTypes_eventConfig<Types_ChimeraProtocol_MarketResolved_eventFilters>> = HandlersJS.ChimeraProtocol.MarketResolved.handler as any;

export const ChimeraProtocol_MarketResolved_handlerWithLoader: <loaderReturn>(_1:Internal_genericHandlerWithLoader<Internal_genericLoader<Internal_genericLoaderArgs<Types_ChimeraProtocol_MarketResolved_event,Types_loaderContext>,loaderReturn>,Internal_genericHandler<Internal_genericHandlerArgs<Types_ChimeraProtocol_MarketResolved_event,Types_handlerContext,loaderReturn>>,Types_ChimeraProtocol_MarketResolved_eventFilters>) => void = HandlersJS.ChimeraProtocol.MarketResolved.handlerWithLoader as any;

export const ChimeraProtocol_AgentDelegationUpdated_contractRegister: Types_fnWithEventConfig<Internal_genericContractRegister<Internal_genericContractRegisterArgs<Types_ChimeraProtocol_AgentDelegationUpdated_event,Types_contractRegistrations>>,Types_HandlerTypes_eventConfig<Types_ChimeraProtocol_AgentDelegationUpdated_eventFilters>> = HandlersJS.ChimeraProtocol.AgentDelegationUpdated.contractRegister as any;

export const ChimeraProtocol_AgentDelegationUpdated_handler: Types_fnWithEventConfig<Internal_genericHandler<Internal_genericHandlerArgs<Types_ChimeraProtocol_AgentDelegationUpdated_event,Types_handlerContext,void>>,Types_HandlerTypes_eventConfig<Types_ChimeraProtocol_AgentDelegationUpdated_eventFilters>> = HandlersJS.ChimeraProtocol.AgentDelegationUpdated.handler as any;

export const ChimeraProtocol_AgentDelegationUpdated_handlerWithLoader: <loaderReturn>(_1:Internal_genericHandlerWithLoader<Internal_genericLoader<Internal_genericLoaderArgs<Types_ChimeraProtocol_AgentDelegationUpdated_event,Types_loaderContext>,loaderReturn>,Internal_genericHandler<Internal_genericHandlerArgs<Types_ChimeraProtocol_AgentDelegationUpdated_event,Types_handlerContext,loaderReturn>>,Types_ChimeraProtocol_AgentDelegationUpdated_eventFilters>) => void = HandlersJS.ChimeraProtocol.AgentDelegationUpdated.handlerWithLoader as any;

export const ChimeraProtocol_PythPriceUpdated_contractRegister: Types_fnWithEventConfig<Internal_genericContractRegister<Internal_genericContractRegisterArgs<Types_ChimeraProtocol_PythPriceUpdated_event,Types_contractRegistrations>>,Types_HandlerTypes_eventConfig<Types_ChimeraProtocol_PythPriceUpdated_eventFilters>> = HandlersJS.ChimeraProtocol.PythPriceUpdated.contractRegister as any;

export const ChimeraProtocol_PythPriceUpdated_handler: Types_fnWithEventConfig<Internal_genericHandler<Internal_genericHandlerArgs<Types_ChimeraProtocol_PythPriceUpdated_event,Types_handlerContext,void>>,Types_HandlerTypes_eventConfig<Types_ChimeraProtocol_PythPriceUpdated_eventFilters>> = HandlersJS.ChimeraProtocol.PythPriceUpdated.handler as any;

export const ChimeraProtocol_PythPriceUpdated_handlerWithLoader: <loaderReturn>(_1:Internal_genericHandlerWithLoader<Internal_genericLoader<Internal_genericLoaderArgs<Types_ChimeraProtocol_PythPriceUpdated_event,Types_loaderContext>,loaderReturn>,Internal_genericHandler<Internal_genericHandlerArgs<Types_ChimeraProtocol_PythPriceUpdated_event,Types_handlerContext,loaderReturn>>,Types_ChimeraProtocol_PythPriceUpdated_eventFilters>) => void = HandlersJS.ChimeraProtocol.PythPriceUpdated.handlerWithLoader as any;

/** Register a Block Handler. It'll be called for every block by default. */
export const onBlock: (_1:Envio_onBlockOptions<Types_chain>, _2:((_1:Envio_onBlockArgs<Types_handlerContext>) => Promise<void>)) => void = HandlersJS.onBlock as any;

export const ChimeraProtocol: {
  MarketResolved: {
    handlerWithLoader: <loaderReturn>(_1:Internal_genericHandlerWithLoader<Internal_genericLoader<Internal_genericLoaderArgs<Types_ChimeraProtocol_MarketResolved_event,Types_loaderContext>,loaderReturn>,Internal_genericHandler<Internal_genericHandlerArgs<Types_ChimeraProtocol_MarketResolved_event,Types_handlerContext,loaderReturn>>,Types_ChimeraProtocol_MarketResolved_eventFilters>) => void; 
    handler: Types_fnWithEventConfig<Internal_genericHandler<Internal_genericHandlerArgs<Types_ChimeraProtocol_MarketResolved_event,Types_handlerContext,void>>,Types_HandlerTypes_eventConfig<Types_ChimeraProtocol_MarketResolved_eventFilters>>; 
    contractRegister: Types_fnWithEventConfig<Internal_genericContractRegister<Internal_genericContractRegisterArgs<Types_ChimeraProtocol_MarketResolved_event,Types_contractRegistrations>>,Types_HandlerTypes_eventConfig<Types_ChimeraProtocol_MarketResolved_eventFilters>>
  }; 
  MarketCreated: {
    handlerWithLoader: <loaderReturn>(_1:Internal_genericHandlerWithLoader<Internal_genericLoader<Internal_genericLoaderArgs<Types_ChimeraProtocol_MarketCreated_event,Types_loaderContext>,loaderReturn>,Internal_genericHandler<Internal_genericHandlerArgs<Types_ChimeraProtocol_MarketCreated_event,Types_handlerContext,loaderReturn>>,Types_ChimeraProtocol_MarketCreated_eventFilters>) => void; 
    handler: Types_fnWithEventConfig<Internal_genericHandler<Internal_genericHandlerArgs<Types_ChimeraProtocol_MarketCreated_event,Types_handlerContext,void>>,Types_HandlerTypes_eventConfig<Types_ChimeraProtocol_MarketCreated_eventFilters>>; 
    contractRegister: Types_fnWithEventConfig<Internal_genericContractRegister<Internal_genericContractRegisterArgs<Types_ChimeraProtocol_MarketCreated_event,Types_contractRegistrations>>,Types_HandlerTypes_eventConfig<Types_ChimeraProtocol_MarketCreated_eventFilters>>
  }; 
  BetPlaced: {
    handlerWithLoader: <loaderReturn>(_1:Internal_genericHandlerWithLoader<Internal_genericLoader<Internal_genericLoaderArgs<Types_ChimeraProtocol_BetPlaced_event,Types_loaderContext>,loaderReturn>,Internal_genericHandler<Internal_genericHandlerArgs<Types_ChimeraProtocol_BetPlaced_event,Types_handlerContext,loaderReturn>>,Types_ChimeraProtocol_BetPlaced_eventFilters>) => void; 
    handler: Types_fnWithEventConfig<Internal_genericHandler<Internal_genericHandlerArgs<Types_ChimeraProtocol_BetPlaced_event,Types_handlerContext,void>>,Types_HandlerTypes_eventConfig<Types_ChimeraProtocol_BetPlaced_eventFilters>>; 
    contractRegister: Types_fnWithEventConfig<Internal_genericContractRegister<Internal_genericContractRegisterArgs<Types_ChimeraProtocol_BetPlaced_event,Types_contractRegistrations>>,Types_HandlerTypes_eventConfig<Types_ChimeraProtocol_BetPlaced_eventFilters>>
  }; 
  PythPriceUpdated: {
    handlerWithLoader: <loaderReturn>(_1:Internal_genericHandlerWithLoader<Internal_genericLoader<Internal_genericLoaderArgs<Types_ChimeraProtocol_PythPriceUpdated_event,Types_loaderContext>,loaderReturn>,Internal_genericHandler<Internal_genericHandlerArgs<Types_ChimeraProtocol_PythPriceUpdated_event,Types_handlerContext,loaderReturn>>,Types_ChimeraProtocol_PythPriceUpdated_eventFilters>) => void; 
    handler: Types_fnWithEventConfig<Internal_genericHandler<Internal_genericHandlerArgs<Types_ChimeraProtocol_PythPriceUpdated_event,Types_handlerContext,void>>,Types_HandlerTypes_eventConfig<Types_ChimeraProtocol_PythPriceUpdated_eventFilters>>; 
    contractRegister: Types_fnWithEventConfig<Internal_genericContractRegister<Internal_genericContractRegisterArgs<Types_ChimeraProtocol_PythPriceUpdated_event,Types_contractRegistrations>>,Types_HandlerTypes_eventConfig<Types_ChimeraProtocol_PythPriceUpdated_eventFilters>>
  }; 
  AgentDelegationUpdated: {
    handlerWithLoader: <loaderReturn>(_1:Internal_genericHandlerWithLoader<Internal_genericLoader<Internal_genericLoaderArgs<Types_ChimeraProtocol_AgentDelegationUpdated_event,Types_loaderContext>,loaderReturn>,Internal_genericHandler<Internal_genericHandlerArgs<Types_ChimeraProtocol_AgentDelegationUpdated_event,Types_handlerContext,loaderReturn>>,Types_ChimeraProtocol_AgentDelegationUpdated_eventFilters>) => void; 
    handler: Types_fnWithEventConfig<Internal_genericHandler<Internal_genericHandlerArgs<Types_ChimeraProtocol_AgentDelegationUpdated_event,Types_handlerContext,void>>,Types_HandlerTypes_eventConfig<Types_ChimeraProtocol_AgentDelegationUpdated_eventFilters>>; 
    contractRegister: Types_fnWithEventConfig<Internal_genericContractRegister<Internal_genericContractRegisterArgs<Types_ChimeraProtocol_AgentDelegationUpdated_event,Types_contractRegistrations>>,Types_HandlerTypes_eventConfig<Types_ChimeraProtocol_AgentDelegationUpdated_eventFilters>>
  }
} = HandlersJS.ChimeraProtocol as any;
